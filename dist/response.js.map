{"version":3,"sources":["../src/response.js"],"names":["Response","message","messageType","messageId","payload","JSON","parse","err","Error"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;IAGMA,Q,WAAAA,Q;;;;;;;iCACiBC,O,EAAS;AAC5B,UAAIC,oBAAJ;AAAA,UAAiBC,kBAAjB;AAAA,UAA4BC,gBAA5B;AACA,UAAI;AAAA,0BACkCC,KAAKC,KAAL,CAAWL,OAAX,CADlC;;AAAA;;AACDC,mBADC;AACYC,iBADZ;AACuBC,eADvB;AAEH,OAFD,CAEE,OAAOG,GAAP,EAAY;AACZ,cAAM,IAAIC,KAAJ,gCAAuCP,OAAvC,WAAoDM,IAAIN,OAAxD,CAAN;AACD;AACD,aAAO,CAACC,WAAD,EAAcC,SAAd,EAAyBC,OAAzB,CAAP;AACD;;;8BAEiBD,S,EAAWC,O,EAA2C;AAAA,UAAlCF,WAAkC;;AACtE,aAAO,yBAAe,CAACA,WAAD,EAAcC,SAAd,EAAyBC,OAAzB,CAAf,CAAP;AACD","file":"response.js","sourcesContent":["import { CALLRESULT_MESSAGE } from './constants';\n\nexport\nclass Response {\n  static parseMessage (message) {\n    let messageType, messageId, payload;\n    try {\n      [messageType, messageId, payload] = JSON.parse(message);\n    } catch (err) {\n      throw new Error(`Failed to parse message: \"${message}\", ${err.message}`);\n    }\n    return [messageType, messageId, payload];\n  }\n\n  static toMessage (messageId, payload, messageType = CALLRESULT_MESSAGE) {\n    return JSON.stringify([messageType, messageId, payload]);\n  }\n}\n"]}