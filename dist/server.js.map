{"version":3,"sources":["../src/server.js"],"names":["Server","options","port","server","on","ws","onNewConnection","console","log","socket","info","msg","onMessage","message","fromMessage","messageId","requestCommand","onRequest","responseData","response","createResponse","send","toMessage","request"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;;;IAGMA,M;AACJ,kBAAaC,OAAb,EAAsB;AAAA;;AACpB,SAAKA,OAAL,GAAeA,OAAf;AACD;;;;6BAEoB;AAAA;;AAAA,UAAbC,IAAa,uEAAN,IAAM;;AACnB,WAAKA,IAAL,GAAYA,IAAZ;;AAEA,WAAKC,MAAL,GAAc,IAAI,aAAUH,MAAd,CAAqB,EAAEE,UAAF,EAArB,CAAd;;AAEA,WAAKC,MAAL,CAAYC,EAAZ,CAAe,YAAf,EAA6B,UAACC,EAAD;AAAA,eAAQ,MAAKC,eAAL,CAAqBD,EAArB,CAAR;AAAA,OAA7B;;AAEAE,cAAQC,GAAR,6BAAsCN,IAAtC;AACD;;;oCAEgBO,M,EAAQ;AAAA;;AACvBF,cAAQG,IAAR,CAAa,gBAAb;;AAEAD,aAAOL,EAAP,CAAU,SAAV,EAAqB,UAACO,GAAD;AAAA,eAAS,OAAKC,SAAL,CAAeH,MAAf,EAAuBE,GAAvB,CAAT;AAAA,OAArB;AACD;;;;2GAEgBF,M,EAAQI,O;;;;;;;;uCAEe,iBAAQC,WAAR,CAAoBD,OAApB,C,iFAA7BE,S,6BAAWC,c;;uBAES,KAAKC,SAAL,CAAeD,cAAf,C;;;AAArBE,4B;AACAC,wB,GAAWH,eAAeI,cAAf,CAA8BF,YAA9B,C;;;AAEjBT,uBAAOY,IAAP,CAAY,mBAASC,SAAT,CAAmBP,SAAnB,EAA8BI,QAA9B,CAAZ;;;;;;;;AAEAZ,wBAAQG,IAAR,CAAa,YAAIG,OAAjB;;;;;;;;;;;;;;;;;;;6GAIaU,O,EAASJ,Q;;;;;;;;;;;;;;;;;;;;;;kBAlCtBnB,M","file":"server.js","sourcesContent":["import WebSocket from 'ws';\nimport {Request} from './request';\nimport {Response} from './response';\n\nexport default\nclass Server {\n  constructor (options) {\n    this.options = options;\n  }\n\n  listen (port = 9220) {\n    this.port = port;\n\n    this.server = new WebSocket.Server({ port });\n\n    this.server.on('connection', (ws) => this.onNewConnection(ws));\n\n    console.log(`[OCPPServer] Listen on ${port}`);\n  }\n\n  onNewConnection (socket) {\n    console.info('new connection');\n\n    socket.on('message', (msg) => this.onMessage(socket, msg));\n  }\n\n  async onMessage (socket, message) {\n    try {\n      const [messageId, requestCommand] = Request.fromMessage(message);\n\n      const responseData = await this.onRequest(requestCommand);\n      const response = requestCommand.createResponse(responseData);\n\n      socket.send(Response.toMessage(messageId, response));\n    } catch (err) {\n      console.info(err.message);\n    }\n  }\n\n  async onRequest (request, response) {\n    // implementation\n  }\n}\n"]}