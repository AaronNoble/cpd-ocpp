{"version":3,"sources":["../src/client.js"],"names":["Client","options","resolve","reject","ws","serverUrl","perMessageDeflate","protocol","protocolVersion","on","data","onResponse","command","requestMessageId","socket","addListener","onMessage","send","toMessage","message","parseMessage","messageType","messageId","payload","removeListener","createResponse","Error","console","info"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;;;AAEA;;;;IAGMA,M;AACJ,kBAAaC,OAAb,EAAsB;AAAA;;AACpB,SAAKA,OAAL,GAAeA,OAAf;AACD;;;;8BAEU;AAAA;;AACT,aAAO,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,cAAKC,EAAL,GAAU,iBAAc,MAAKH,OAAL,CAAaI,SAA3B,EAAsC;AAC9CC,6BAAmB,KAD2B;AAE9CC,oBAAU,SAFoC;AAG9CC,2BAAiB;AAH6B,SAAtC,CAAV;;AAMA,cAAKJ,EAAL,CAAQK,EAAR,CAAW,SAAX,EAAsB,UAACC,IAAD;AAAA,iBAAU,MAAKC,UAAL,CAAgBD,IAAhB,CAAV;AAAA,SAAtB;;AAEA,cAAKN,EAAL,CAAQK,EAAR,CAAW,MAAX,EAAmB;AAAA,iBAAMP,SAAN;AAAA,SAAnB;;AAEA,cAAKE,EAAL,CAAQK,EAAR,CAAW,OAAX,EAAoBN,MAApB;;AAEA,eAAO,MAAKC,EAAZ;AACD,OAdM,CAAP;AAeD;;;yBAEKQ,O,EAAS;AACb,UAAMC,mBAAmB,kBAAzB;AACA,UAAMC,SAAS,KAAKV,EAApB;;AAEA,aAAO,sBAAY,UAACF,OAAD,EAAUC,MAAV,EAAqB;AACtCW,eAAOC,WAAP,CAAmB,SAAnB,EAA8BC,SAA9B;;AAEAF,eAAOG,IAAP,CAAY,iBAAQC,SAAR,CAAkBL,gBAAlB,EAAoCD,OAApC,CAAZ;;AAEA,iBAASI,SAAT,CAAoBG,OAApB,EAA6B;AAAA,sCACe,mBAASC,YAAT,CAAsBD,OAAtB,CADf;AAAA;AAAA,cACpBE,WADoB;AAAA,cACPC,SADO;AAAA,cACIC,OADJ;;AAE3B,cAAID,cAAcT,gBAAlB,EAAoC;AAClC;AACD;AACDC,iBAAOU,cAAP,CAAsB,SAAtB,EAAiCR,SAAjC;;AAEA,kBAAQK,WAAR;AACE;AAAyB,qBAAOnB,QAAQU,QAAQa,cAAR,CAAuBF,OAAvB,CAAR,CAAP;AACzB;AAAwB,qBAAOpB,OAAOoB,OAAP,CAAP;AACxB;AAAS,qBAAOpB,OAAO,IAAIuB,KAAJ,2BAAkCL,WAAlC,CAAP,CAAP;AAHX;AAKD;AACF,OAlBM,CAAP;AAmBD;;;+BAEWX,I,EAAM;AAChBiB,cAAQC,IAAR,CAAalB,IAAb;AACD;;;;;kBAlDGV,M","file":"client.js","sourcesContent":["import WebSocket from 'ws';\nimport {Request} from './request';\nimport {Response} from './response';\nimport uuid from 'uuid/v4';\n\nimport {CALLERROR_MESSAGE, CALLRESULT_MESSAGE} from './constants';\n\nexport default\nclass Client {\n  constructor (options) {\n    this.options = options;\n  }\n\n  connect () {\n    return new Promise((resolve, reject) => {\n      this.ws = new WebSocket(this.options.serverUrl, {\n        perMessageDeflate: false,\n        protocol: 'ocpp1.5',\n        protocolVersion: 13\n      });\n\n      this.ws.on('message', (data) => this.onResponse(data));\n\n      this.ws.on('open', () => resolve());\n\n      this.ws.on('error', reject);\n\n      return this.ws;\n    });\n  }\n\n  send (command) {\n    const requestMessageId = uuid();\n    const socket = this.ws;\n\n    return new Promise((resolve, reject) => {\n      socket.addListener('message', onMessage);\n\n      socket.send(Request.toMessage(requestMessageId, command));\n\n      function onMessage (message) {\n        const [messageType, messageId, payload] = Response.parseMessage(message);\n        if (messageId !== requestMessageId) {\n          return;\n        }\n        socket.removeListener('message', onMessage);\n\n        switch (messageType) {\n          case CALLRESULT_MESSAGE: return resolve(command.createResponse(payload));\n          case CALLERROR_MESSAGE: return reject(payload);\n          default: return reject(new Error(`Unknown message type ${messageType}`));\n        }\n      }\n    });\n  }\n\n  onResponse (data) {\n    console.info(data);\n  }\n}\n"]}