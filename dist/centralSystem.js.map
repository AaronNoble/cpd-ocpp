{"version":3,"sources":["../src/centralSystem.js"],"names":["debug","CentralSystem","options","clients","port","host","validateConnection","wsOptions","handleProtocols","protocols","req","indexOf","verifyClient","info","cb","url","isAccept","headers","server","Server","on","ws","console","onNewConnection","socket","err","readyState","protocol","close","connection","onRequest","command","index","splice","push"],"mappings":"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","file":"centralSystem.js","sourcesContent":["import WebSocket from 'ws';\nimport debugFn from 'debug';\nimport { Connection } from './connection';\nimport {\n  DEBUG_LIBNAME,\n  OCPP_PROTOCOL_1_6\n} from './constants';\n\nconst debug = debugFn(DEBUG_LIBNAME);\n\nexport default class CentralSystem {\n  constructor (options) {\n    this.options = options || {};\n    this.clients = [];\n  }\n\n  listen (port = 9220, host = null) {\n    this.port = port;\n\n    const validateConnection = this.options.validateConnection || (() => true);\n\n    const wsOptions = {\n      port,\n      host,\n      handleProtocols: (protocols, req) => {\n        if (protocols.indexOf(OCPP_PROTOCOL_1_6) === -1) {\n          return '';\n        }\n        return OCPP_PROTOCOL_1_6;\n      },\n      verifyClient: async (info, cb) => {\n        const isAccept = await validateConnection(info.req.url);\n\n        debug(`Request for connect \"${info.req.url}\" (${info.req.headers['sec-websocket-protocol']}) - ${isAccept ? 'Valid identifier' : 'Invalid identifier'}`);\n\n        cb(isAccept, 404, 'Central System does not recognize the charge point identifier in the URL path');\n      },\n      ...(this.options.wsOptions || {})\n    };\n\n    this.server = new WebSocket.Server(wsOptions);\n\n    this.server.on('error', (ws, req) => {\n      console.info(ws, req);\n    });\n\n    this.server.on('upgrade', (ws, req) => {\n      console.info(req);\n    });\n    this.server.on('connection', (ws, req) => this.onNewConnection(ws, req));\n\n    debug(`Listen on ${host || 'default host'}:${port}`);\n  }\n\n  onNewConnection (socket, req) {\n    socket.on('error', (err) => {\n      console.info(err, socket.readyState);\n    });\n\n    if (!socket.protocol) {\n      // From Spec: If the Central System does not agree to using one of the subprotocols offered by the client,\n      // it MUST complete the WebSocket handshake with a response without a Sec-WebSocket-Protocol header and then\n      // immediately close the WebSocket connection.\n      debug(`Close connection due to unsupported protocol`);\n      return socket.close();\n    }\n\n    const connection = new Connection(socket, req);\n\n    connection.onRequest = (command) => this.onRequest(connection, command);\n\n    socket.on('close', (err) => {\n      const index = this.clients.indexOf(connection);\n      this.clients.splice(index, 1);\n    });\n    this.clients.push(connection);\n  }\n\n  async onRequest (connection, command) {\n    // implementation\n  }\n}\n"]}